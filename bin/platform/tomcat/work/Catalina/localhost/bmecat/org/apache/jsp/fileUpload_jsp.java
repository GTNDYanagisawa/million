/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2015-05-18 04:26:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import de.hybris.platform.util.JspContext;
import java.util.*;
import java.io.*;
import java.net.*;
import java.sql.*;
import javax.sql.*;
import java.lang.reflect.*;
import javax.naming.*;
import javax.transaction.*;
import de.hybris.platform.core.*;
import de.hybris.platform.cache.*;
import de.hybris.platform.jalo.*;
import de.hybris.platform.jalo.c2l.Currency;
import de.hybris.platform.jalo.c2l.*;
import de.hybris.platform.util.*;
import de.hybris.platform.jalo.product.*;
import de.hybris.platform.jalo.user.*;
import de.hybris.platform.jalo.type.*;
import de.hybris.platform.jalo.order.*;
import de.hybris.platform.jalo.meta.*;
import de.hybris.platform.jalo.extension.*;
import de.hybris.platform.jalo.flexiblesearch.*;
import de.hybris.platform.persistence.flexiblesearch.*;
import de.hybris.platform.util.collections.*;
import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.xml.sax.InputSource;
import de.hybris.platform.jalo.media.Media;
import de.hybris.platform.impex.jalo.*;
import de.hybris.platform.impex.constants.*;
import de.hybris.platform.impex.jalo.media.*;
import de.hybris.platform.impex.jalo.ImpExManager;
import de.hybris.platform.bmecat.parser.BMECatParser;
import de.hybris.platform.bmecat.jalo.bmecat2csv.BMECat2CSVObjectProcessor;

public final class fileUpload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/./inc/head.jspf", Long.valueOf(1410900424000L));
    _jspx_dependants.put("/WEB-INF/tlds/c-rt.tld", Long.valueOf(1410900424000L));
    _jspx_dependants.put("/./inc/tail.jspf", Long.valueOf(1410900424000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fchoose;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fchoose = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fchoose.release();
    _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//thestyleworks.de//DTD XHTML 1.0 Custom//EN\" \"../dtd/xhtml1-custom.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

	JaloSession jaloSession = null;
	try
	{
		jaloSession = WebSessionFunctions.getSession( request );
	}
	catch( Exception e )
	{
	}
	response.setContentType("text/html; charset=utf-8"); 																				 
	request.setCharacterEncoding("utf-8");
	response.setCharacterEncoding("utf-8");

      out.write("\r\n\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n\t<link rel=\"stylesheet\" href=\"css/entryweb/hybris_main.css\">\r\n\t<title> [");
      out.print(Registry.getCurrentTenant().getTenantID());
      out.write("] - bmecat - hybris platform </title>\r\n</head>\r\n\r\n<body>\r\n<div id=\"head\">\r\n\t&nbsp;\r\n</div>\r\n<div id=\"rightmargin\">&nbsp;</div>\r\n\t\t<div id=\"headsystem\" class=\"header\">\r\n");

		Tenant hs = Registry.getCurrentTenant();
		if( hs instanceof SlaveTenant )
		{

      out.write(" \r\n\t\t&lt;&lt;");
      out.print(hs.getTenantID());
      out.write("&gt;&gt; <br/>\r\n\t\t<a href=\"/?setmaster=true\" style=\"color:white;font-size:10px;\"> [Back to master tenant] </a>\r\n");

		}

      out.write("\r\n\t\t</div>\r\n<div id=\"headtop\">\r\n\t<img name=\"head_E-Business_Software\" src=\"css/entryweb/HEAD_e-business_platform.gif\"/>\r\n\r\n\t<div class=\"header\">bmecat</div>\r\n\t<div class=\"header\" style=\"font-size: 8px;\"><br/><br/></div>\r\n \t<div class=\"header\" style=\"font-size: 8px;\">Encoding = ");
      out.print( request.getCharacterEncoding());
      out.write('/');
      out.print( response.getCharacterEncoding());
      out.write("</div>\r\n</div>\r\n\r\n<div id=\"MainNav\">\r\n</div>\r\n\r\n<div id=\"Scaleback\">&nbsp;</div>\r\n\r\n<div id=\"main\">\r\n\r\n\t<div id=\"left\">\r\n\t</div>\r\n\r\n\r\n\t<div id=\"right\">\r\n\t</div>\r\n\r\n\r\n\t<div id=\"content\">\r\n\r\n\t\t<!-- Headline START ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-->\r\n\t\t<div class=\"absatz\">\r\n\t\t\r\n\t\t\r\n");
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"absatz\"><a href=\"");
      out.print(response.encodeURL("/bmecat"));
      out.write("\">[Back\r\nto BMECat import]</a></div>\r\n<div class=\"absatz\">&nbsp;</div>\r\n<div class=\"absatz\">\r\n\r\n\r\n<h1>BMECat transforming</h1>\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');

	String encoding = "windows-1252"; //request.getParameter("encoding");
	String script = "";
	String mediaPK = "";
	String resourceMediaPK = "";
	Map<String, String> bmecatHeader = new HashMap<String, String>();
	String scriptConstants = "";

	JspContext jspc = new JspContext( out, request, response );

	System.out.println( "Content Type =" + request.getContentType() );

	ServletFileUpload upload = new ServletFileUpload();
	//fu.setSizeMax(1000000);
	FileItemIterator iter = upload.getItemIterator( request );

	//only one xml file and one zip file are allowed.
	FileItemStream[] fis = new FileItemStream[2];
	int i = 0;
	while( iter.hasNext() )
	{
		User u = null;
		
		if(i == 0)
		{
			fis[0] = iter.next();
			i++;
			if( !fis[0].isFormField() )
			{
				if( !jaloSession.getUser().isAdmin() )
				{
					u = jaloSession.getUser();
					jaloSession.setUser( UserManager.getInstance().getAdminEmployee() );
				}
				MediaDataTranslator.setMediaDataHandler( new DefaultMediaDataHandler() );
				String importFileName = fis[0].getName();

				//only *.xml files can be transformed to .csv files
				if(importFileName.toLowerCase().endsWith(".xml"))
				{
					//parsing BMECat.xml
					BMECat2CSVObjectProcessor proc = new BMECat2CSVObjectProcessor();
					BMECatParser bmecatParser = new BMECatParser(proc);
					try
					{
						bmecatParser.parse(new InputSource(fis[0].openStream()));
						proc.finish();
						Media media = proc.getResultZipMedia();
						if(media == null)
						{
							out.print("media is null.");
						}
						else
						{
							out.print("<a href=\"" + media.getDownloadURL()+ "\">zip_file </a><br/>");
						}
						out.print("<br/>Info of transformed catalog:<br/>");
						out.print("<br/>" + proc.getGeneralCatalogInfo() + "<br/>");
						bmecatHeader = proc.getBmecatHeader();
						
						//dealing with the language
						String language = "";
						if("eng".equals(bmecatHeader.get("catalog.language").trim()))
						{
							language = "en";
							out.print("Language: [eng] --> [en]<br/><p/>");
						}
						else if("deu".equals(bmecatHeader.get("catalog.language").trim()))
						{
							language = "de";
							out.print("Language: [deu] --> [de]<br/><p/>");
						}
						else
							language = bmecatHeader.get("catalog.language").trim();
			
						//get the header information from bmecat.xml
						if(bmecatHeader.containsKey("catalog.id"))
						{
							out.print("*************constants starts*************<br/>");
							scriptConstants += "$catalog_id=" + bmecatHeader.get("catalog.id") + "\n";
							out.print("$catalog_id=" + bmecatHeader.get("catalog.id") + "<br/>");
						}
						if(bmecatHeader.containsKey("catalog.version"))
						{
							scriptConstants += "$catalog_version=" + bmecatHeader.get("catalog.version") + "\n";
							out.print("$catalog_version=" + bmecatHeader.get("catalog.version") + "<br/>");
						}
						if(bmecatHeader.containsKey("catalog.name"))
						{
							scriptConstants += "$catalog_name=" + bmecatHeader.get("catalog.name") + "\n";
							out.print("$catalog_name=" + bmecatHeader.get("catalog.name") + "<br/>");
						}
						if(bmecatHeader.containsKey("catalog.language"))
						{
							scriptConstants += "$lang_iso=" + language + "\n";
							out.print("$lang_iso=" + language + "<br/>");
						}
						if(bmecatHeader.containsKey("catalog.currency"))
						{
							scriptConstants += "$cur_iso=" + bmecatHeader.get("catalog.currency") + "\n";
							out.print("$cur_iso=" + bmecatHeader.get("catalog.currency") + "<br/>");
							out.print("*************constants ends*************<br/>");
						}					
						scriptConstants += "#% impex.setLocale( Locale.GERMAN );\n";
						out.print("<br/>Locale is set to German.<br/>");
						mediaPK = media.getPK().toString();
					}
					catch (Exception e) 
					{
						System.out.println("import exception in fileUpload.jsp -->  " + e.getMessage());
						e.printStackTrace();
					}
					out.print("<br/>File [" + importFileName + "] is transformed to csv files successfully.<br/>");
				}
				else
				{
					out.print("<br/><font color='red'>The first file [" + importFileName + "] is not valid.</font><br/>");
					out.print("<font color='red'>Only the bmecat xml file can be imported.</font><br/>");
					break;
				}
			}
		}
		else if(i == 1)
		{
			fis[1] = iter.next();
			i++;
			if( !fis[1].isFormField() )
			{
				if( !jaloSession.getUser().isAdmin() )
				{
					u = jaloSession.getUser();
					jaloSession.setUser( UserManager.getInstance().getAdminEmployee() );
				}
				MediaDataTranslator.setMediaDataHandler( new DefaultMediaDataHandler() );
				String importFileName = fis[1].getName();

				//only .zip files can be uploaded
				if(importFileName.toLowerCase().endsWith(".zip"))
				{
					ImpExMedia resourceMedia=ImpExManager.getInstance().createImpExMedia("resources.zip");
					resourceMedia.setData( new DataInputStream(fis[1].openStream()), "resources.zip", ImpExConstants.File.MIME_TYPE_ZIP );
					resourceMedia.setRemoveOnSuccess( true );
					resourceMediaPK = resourceMedia.getPK().toString();
					
      if (_jspx_meth_c_005fset_005f1(_jspx_page_context))
        return;

					break;
				}
				else
				{
					out.print("<br/><font color='red'>The second file [" + importFileName + "] is not valid.</font><br/>");
					out.print("<font color='red'>Only the bmecat zip file can be imported.</font><br/>");
					break;
				}
			}
		}

		MediaDataTranslator.unsetMediaDataHandler( );	
		if( u != null )
		{
			jaloSession.setUser( u );
		}

	}

      out.write("\r\n<p><br />\r\n<b>Note: Please also check the application server output if errors occured.</b>\r\n<p>\r\n\r\n");
      //  c:choose
      org.apache.taglibs.standard.tag.common.core.ChooseTag _jspx_th_c_005fchoose_005f0 = (org.apache.taglibs.standard.tag.common.core.ChooseTag) _005fjspx_005ftagPool_005fc_005fchoose.get(org.apache.taglibs.standard.tag.common.core.ChooseTag.class);
      _jspx_th_c_005fchoose_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fchoose_005f0.setParent(null);
      int _jspx_eval_c_005fchoose_005f0 = _jspx_th_c_005fchoose_005f0.doStartTag();
      if (_jspx_eval_c_005fchoose_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write('\r');
          out.write('\n');
          //  c:when
          org.apache.taglibs.standard.tag.rt.core.WhenTag _jspx_th_c_005fwhen_005f0 = (org.apache.taglibs.standard.tag.rt.core.WhenTag) _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.WhenTag.class);
          _jspx_th_c_005fwhen_005f0.setPageContext(_jspx_page_context);
          _jspx_th_c_005fwhen_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fchoose_005f0);
          // /fileUpload.jsp(192,0) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
          _jspx_th_c_005fwhen_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fileUploaded == 1}", java.lang.Boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false)).booleanValue());
          int _jspx_eval_c_005fwhen_005f0 = _jspx_th_c_005fwhen_005f0.doStartTag();
          if (_jspx_eval_c_005fwhen_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
            do {
              out.write("\r\n<table style=\"text-align: left; width: 100%;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\tScriptarea:\r\n\t\t\t\t<form name=\"bmecatImportForm\" action=\"validation.jsp\" method=\"post\">\r\n\t\t\t\t\t<input type=\"hidden\" name=\"mediaPK\" value=\"");
              out.print( mediaPK );
              out.write("\"></input>\r\n\t\t\t\t\t<input type=\"hidden\" name=\"scriptConstants\" value=\"");
              out.print( scriptConstants );
              out.write("\"></input>\r\n\t\t\t\t\t<input type=\"hidden\" name=\"resourceMediaPK\" value=\"");
              out.print( resourceMediaPK );
              out.write("\"></input>\r\n\t\t\t\t\t<textarea name=\"script\" cols=\"100\" rows=\"20\" wrap=\"off\">");
              out.print(script);
              out.write("</textarea>\r\n\t\t\t\t\t<p/>\r\n\t\t\t\t\t<input type=\"submit\" name=\"Submit\" value=\"Go!\"/>\r\n\t\t\t\t</form>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n");
              int evalDoAfterBody = _jspx_th_c_005fwhen_005f0.doAfterBody();
              if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                break;
            } while (true);
          }
          if (_jspx_th_c_005fwhen_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
            return;
          }
          _005fjspx_005ftagPool_005fc_005fwhen_0026_005ftest.reuse(_jspx_th_c_005fwhen_005f0);
          out.write('\r');
          out.write('\n');
          int evalDoAfterBody = _jspx_th_c_005fchoose_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fchoose_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
        return;
      }
      _005fjspx_005ftagPool_005fc_005fchoose.reuse(_jspx_th_c_005fchoose_005f0);
      out.write("\r\n\r\n");
      out.write("<div id=\"absatz\" align=\"left\">\r\n\t\t&nbsp;<br/><br/></br/>&nbsp;\r\n\t</div>\r\n\t\r\n\t<div id=\"absatz\" align=\"left\">\r\n\r\n");
      out.print(Config.getParameter("build.description"));
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print(Config.getParameter("build.version"));
      out.write(" - \r\n");
      out.print(Config.getParameter("build.builddate"));
      out.write(" - \r\n\tCopyright (c) 2000-2013 hybris AG - <a href=\"http://www.hybris.com\">www.hybris.com</a></font><p>\r\n\r\n\t</div >\r\n\t\r\n\r\n\t\t</div><!-- Headline ENDE -->\r\n\r\n\r\n\t</div>\r\n</div>\r\n</body>\r\n</html>\r\n\r\n\r\n");

JaloSession.deactivate();
session.invalidate();

      out.write('\r');
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f0.setParent(null);
    // /fileUpload.jsp(23,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setVar("fileUploaded");
    // /fileUpload.jsp(23,0) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setScope("session");
    // /fileUpload.jsp(23,0) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f0.setValue("0");
    int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
    if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005fset_005f1.setParent(null);
    // /fileUpload.jsp(167,7) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f1.setVar("fileUploaded");
    // /fileUpload.jsp(167,7) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fset_005f1.setValue("1");
    int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
    if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
    return false;
  }
}
