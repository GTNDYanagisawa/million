/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspCServletContext/1.0
 * Generated at: 2015-05-18 04:26:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import de.hybris.platform.util.JspContext;
import java.util.*;
import java.io.*;
import java.net.*;
import java.sql.*;
import javax.sql.*;
import java.lang.reflect.*;
import javax.naming.*;
import javax.transaction.*;
import de.hybris.platform.core.*;
import de.hybris.platform.cache.*;
import de.hybris.platform.jalo.*;
import de.hybris.platform.jalo.c2l.Currency;
import de.hybris.platform.jalo.c2l.*;
import de.hybris.platform.util.*;
import de.hybris.platform.jalo.product.*;
import de.hybris.platform.jalo.user.*;
import de.hybris.platform.jalo.type.*;
import de.hybris.platform.jalo.order.*;
import de.hybris.platform.jalo.meta.*;
import de.hybris.platform.jalo.extension.*;
import de.hybris.platform.jalo.flexiblesearch.*;
import de.hybris.platform.persistence.flexiblesearch.*;
import de.hybris.platform.util.collections.*;
import java.util.zip.*;
import de.hybris.platform.jalo.media.*;
import de.hybris.platform.impex.constants.*;
import de.hybris.platform.impex.jalo.*;
import de.hybris.platform.impex.jalo.cronjob.*;
import de.hybris.platform.cronjob.jalo.CronJobToJspLogListener;
import de.hybris.platform.util.logging.HybrisLogger;

public final class validation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/./inc/head.jspf", Long.valueOf(1410900424000L));
    _jspx_dependants.put("/./inc/tail.jspf", Long.valueOf(1410900424000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//thestyleworks.de//DTD XHTML 1.0 Custom//EN\" \"../dtd/xhtml1-custom.dtd\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");

	JaloSession jaloSession = null;
	try
	{
		jaloSession = WebSessionFunctions.getSession( request );
	}
	catch( Exception e )
	{
	}
	response.setContentType("text/html; charset=utf-8"); 																				 
	request.setCharacterEncoding("utf-8");
	response.setCharacterEncoding("utf-8");

      out.write("\r\n\r\n<html>\r\n<head>\r\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n\t<link rel=\"stylesheet\" href=\"css/entryweb/hybris_main.css\">\r\n\t<title> [");
      out.print(Registry.getCurrentTenant().getTenantID());
      out.write("] - bmecat - hybris platform </title>\r\n</head>\r\n\r\n<body>\r\n<div id=\"head\">\r\n\t&nbsp;\r\n</div>\r\n<div id=\"rightmargin\">&nbsp;</div>\r\n\t\t<div id=\"headsystem\" class=\"header\">\r\n");

		Tenant hs = Registry.getCurrentTenant();
		if( hs instanceof SlaveTenant )
		{

      out.write(" \r\n\t\t&lt;&lt;");
      out.print(hs.getTenantID());
      out.write("&gt;&gt; <br/>\r\n\t\t<a href=\"/?setmaster=true\" style=\"color:white;font-size:10px;\"> [Back to master tenant] </a>\r\n");

		}

      out.write("\r\n\t\t</div>\r\n<div id=\"headtop\">\r\n\t<img name=\"head_E-Business_Software\" src=\"css/entryweb/HEAD_e-business_platform.gif\"/>\r\n\r\n\t<div class=\"header\">bmecat</div>\r\n\t<div class=\"header\" style=\"font-size: 8px;\"><br/><br/></div>\r\n \t<div class=\"header\" style=\"font-size: 8px;\">Encoding = ");
      out.print( request.getCharacterEncoding());
      out.write('/');
      out.print( response.getCharacterEncoding());
      out.write("</div>\r\n</div>\r\n\r\n<div id=\"MainNav\">\r\n</div>\r\n\r\n<div id=\"Scaleback\">&nbsp;</div>\r\n\r\n<div id=\"main\">\r\n\r\n\t<div id=\"left\">\r\n\t</div>\r\n\r\n\r\n\t<div id=\"right\">\r\n\t</div>\r\n\r\n\r\n\t<div id=\"content\">\r\n\r\n\t\t<!-- Headline START ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||-->\r\n\t\t<div class=\"absatz\">\r\n\t\t\r\n\t\t\r\n");
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<div class=\"absatz\">\r\n<a href=\"");
      out.print(response.encodeURL("/"));
      out.write("\">[Back to Administration web]</a>\r\n</div>\r\n<div class=\"absatz\">\r\n&nbsp;\r\n</div>\r\n<div class=\"absatz\">\r\n\r\n<h1>BMECat import result</h1>\r\n");
 
	JspContext jspc = new JspContext(out, request, response);
	String script = request.getParameter("script") != null ? request.getParameter("script") : "";
	String mediaPK = request.getParameter("mediaPK") != null ? request.getParameter("mediaPK") : "";
	String resourceMediaPK = request.getParameter("resourceMediaPK") != null ? request.getParameter("resourceMediaPK") : "";
	String scriptConstants = request.getParameter("scriptConstants") != null ? request.getParameter("scriptConstants") : "";
	out.write("script: " + scriptConstants + script + "<br/>");

	// create import media	
	ImpExMedia importMedia=ImpExManager.getInstance().createImpExMedia("importscript.impex");
	importMedia.setData( new DataInputStream(new ByteArrayInputStream((scriptConstants + script).getBytes())), "importscript.impex", ImpExConstants.File.MIME_TYPE_IMPEX );
	importMedia.setRemoveOnSuccess( true );
	
	// create exteneral data
	Collection<ImpExMedia> externalData = new ArrayList<ImpExMedia>();
	//TODO check currency
	try
	{
		Media zip=(Media) JaloSession.getCurrentSession().getItem( PK.parse( mediaPK ) );
		ZipInputStream csvZipStream=new ZipInputStream(zip.getDataFromStreamSure());
		ZipEntry entry;
		while( ( entry = csvZipStream.getNextEntry() ) != null )
		{
			// XXX: avoid temp file by setting data directly to media. Problem at the moment is, that the stream will be closed at each Media.setDate
			File temp = File.createTempFile( "zipentry", "impex" );
			MediaUtil.copy( csvZipStream, new FileOutputStream( temp ) );
			ImpExMedia externalMedia=ImpExManager.getInstance().createImpExMedia(entry.getName());
			externalMedia.setData( new DataInputStream(new FileInputStream(temp)), entry.getName(), ImpExConstants.File.MIME_TYPE_CSV );
			externalMedia.setRemoveOnSuccess( true );
			externalMedia.setLinesToSkip(1);
			externalData.add( externalMedia );
			if( !temp.delete() )
			{
				System.err.println( "Can not delete temporary file " + temp.getAbsolutePath() );
			}
		}
		csvZipStream.close();
		
		// get media with images
		ImpExMedia resourceMedia=(ImpExMedia) JaloSession.getCurrentSession().getItem( PK.parse( resourceMediaPK ) );

		// create impex cronjob and start it		
		ImpExImportCronJob cronJob = ImpExManager.getInstance().createDefaultImpExImportCronJob();
		cronJob.setEnableCodeExecution( true );
		cronJob.setJobMedia( importMedia );
		cronJob.setExternalDataCollection( externalData );
		cronJob.setMediasMedia(resourceMedia);
		String cronJobString = "cronjob with PK=" + cronJob.getPK() + " and name=" + cronJob.getCode();
		out.print( "<br>Starting import synchronous using " + cronJobString + "<br>" );
		CronJobToJspLogListener listener = null;
		try
		{
			listener = new CronJobToJspLogListener( cronJob, jspc );
			HybrisLogger.addListener( listener );
			cronJob = ImpExManager.getInstance().importData( cronJob, true, true );
		}
		finally
		{
			// remove log listener
			if( listener != null && !HybrisLogger.removeListener( listener ) )
			{
				out.print("WARNING: Can not remove log listener for cronjob " + cronJobString );
			}
		}
		if( cronJob==null )
		{
			out.print( "<br><font color='green'>Import was successful (using " + cronJobString + ")</font><br>" );
		}
		else
		{
			out.print( "<br><font color='red'>The content to be imported has caused an error, please refer to the CronJob <a href=\"/hmc/hybris?open=" + cronJob.getPK() + "\">" + cronJob.getCode() + "</a> " + (cronJob.getUnresolvedDataStore() == null ? " (no lines were dumped) " : " as well as the CronJob's dump file <a href=\"/hmc/hybris?open=" + cronJob.getUnresolvedDataStore().getPK() + "\">" + cronJob.getUnresolvedDataStore().getCode() + "</a>") + " for details.</font><br>" );
		}
	}
	catch( ImpExException hve)
	{
		//XXX unknown type, exception caught in console, but not in program?
		out.write("unknown type on screen: " + hve.getMessage());
		System.out.println("unknown type in console: " + hve.getMessage());
		hve.printStackTrace();
	}
	catch( JaloItemNotFoundException e )
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	catch( JaloBusinessException e )
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	catch( IOException e )
	{
		// TODO Auto-generated catch block
		e.printStackTrace();
	}


      out.write("\r\n\r\n\r\n<p />\r\nTODO: if the csv files in the zip file is not correct, some errors should be displayed.\r\n<p>\r\n\r\n");
      out.write("<div id=\"absatz\" align=\"left\">\r\n\t\t&nbsp;<br/><br/></br/>&nbsp;\r\n\t</div>\r\n\t\r\n\t<div id=\"absatz\" align=\"left\">\r\n\r\n");
      out.print(Config.getParameter("build.description"));
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print(Config.getParameter("build.version"));
      out.write(" - \r\n");
      out.print(Config.getParameter("build.builddate"));
      out.write(" - \r\n\tCopyright (c) 2000-2013 hybris AG - <a href=\"http://www.hybris.com\">www.hybris.com</a></font><p>\r\n\r\n\t</div >\r\n\t\r\n\r\n\t\t</div><!-- Headline ENDE -->\r\n\r\n\r\n\t</div>\r\n</div>\r\n</body>\r\n</html>\r\n\r\n\r\n");

JaloSession.deactivate();
session.invalidate();

      out.write('\r');
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
